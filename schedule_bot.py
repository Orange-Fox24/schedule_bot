import pandas as pd
import os
import re
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackContext, Filters
from telegram.error import TelegramError

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_BOT_TOKEN = "7820826946:AAHrL2UCEu9K3jNXdagZ7IveqC5U4W9uFMw"
LOCAL_FILE_PATHS = {
    "1 –∫—É—Ä—Å": "data/1_course.xlsx",
    "2 –∫—É—Ä—Å": "data/2_course.xlsx",
    "3-4 –∫—É—Ä—Å": "data/3_4_course.xlsx"
}
DAYS_OF_WEEK = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']


def clean_group_name(group_name: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    return group_name.strip().replace('"', '').replace("'", "")


def parse_lesson(lesson: str) -> str:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –î–û"""
    if not lesson or pd.isna(lesson) or str(lesson).strip() == '':
        return ""

    # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä (1,2 –ü) –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    lesson = re.sub(r'^\d,\d\s–ü\s', '', str(lesson))

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –î–û)
    parts = [p.strip() for p in str(lesson).split(',')]

    if len(parts) >= 2:
        discipline = parts[0]
        teacher = ', '.join(parts[1:])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π
        return f"{discipline} ({teacher})"
    return lesson


def load_schedule(excel_path: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞"""
    try:
        # –ß–∏—Ç–∞–µ–º Excel, –ø—Ä–æ–ø—É—Å–∫–∞—è —Å—Ç—Ä–æ–∫—É —Å "–û–ë–ï–î"
        df = pd.read_excel(excel_path)

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã
        df = df.dropna(how='all')
        df = df.loc[:, ~df.columns.str.contains('^Unnamed')]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
        df.columns = [clean_group_name(col) for col in df.columns]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –î–û)
        for col in df.columns[2:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∫–æ–ª–æ–Ω–∫–∏ (–î–µ–Ω—å –∏ –í—Ä–µ–º—è)
            df[col] = df[col].apply(parse_lesson)

        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
        return None


def get_schedule_for_day(df, group: str, day: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    schedule = []
    current_day = ""

    for _, row in df.iterrows():
        row_day = str(row.iloc[0]).strip()
        time = str(row.iloc[1]).strip()

        if row_day != "":
            current_day = row_day

        if current_day.lower() == day.lower() and time.lower() != "–æ–±–µ–¥":
            lesson = row[group] if group in df.columns else ""
            if lesson and str(lesson).strip() and not pd.isna(lesson):
                schedule.append(f"‚è∞ <b>{time}</b> ‚îÜ {lesson}")

    return schedule


def get_full_schedule(df, group: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    schedule = {}
    current_day = ""

    for _, row in df.iterrows():
        row_day = str(row.iloc[0]).strip()
        time = str(row.iloc[1]).strip()

        if row_day != "":
            current_day = row_day
            if current_day not in schedule:
                schedule[current_day] = []

        if time.lower() != "–æ–±–µ–¥":
            lesson = row[group] if group in df.columns else ""
            if lesson and str(lesson).strip() and not pd.isna(lesson):
                schedule[current_day].append(f"‚è∞ <b>{time}</b> ‚îÜ {lesson}")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    for day in DAYS_OF_WEEK:
        if day not in schedule:
            schedule[day] = []

    return schedule


def format_schedule(schedule, group: str, day: str = None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    if not schedule:
        return f"üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    if day:
        response = [
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üìö <b>–ì—Ä—É–ø–ø–∞:</b> {group}\n"
            f"üìÖ <b>–î–µ–Ω—å:</b> {day}\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        ]
        if schedule:
            response.append("\n".join(schedule))
        else:
            response.append("\nüçÉ –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
        response.append("\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    else:
        response = [
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üìö <b>–ì—Ä—É–ø–ø–∞:</b> {group}\n"
            f"üóìÔ∏è <b>–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        ]
        for day_name in DAYS_OF_WEEK:
            day_schedule = schedule.get(day_name, [])
            response.append(
                f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üìå <b>{day_name}</b>\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )
            response.extend(day_schedule if day_schedule else ["\nüçÉ –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π"])
        response.append("\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

    return "\n".join(response)


def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å"], ["3-4 –∫—É—Ä—Å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–ª–ª–µ–¥–∂–∞.\n"
        "üëá –í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:",
        reply_markup=reply_markup
    )


def handle_course_selection(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    course = update.message.text
    if course not in LOCAL_FILE_PATHS:
        update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    excel_path = LOCAL_FILE_PATHS[course]
    if not os.path.exists(excel_path):
        update.message.reply_text("‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    df = load_schedule(excel_path)
    if df is None:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∫–æ–ª–æ–Ω–∫–∏)
    groups = [col for col in df.columns[2:] if str(col).strip() != '']

    if not groups:
        update.message.reply_text("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data['current_df'] = df
    context.user_data['current_course'] = course

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    keyboard = [[group] for group in groups]
    keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    update.message.reply_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω <b>{course}</b>\n"
        "üëá –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )


def handle_group_selection(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    user_input = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if user_input == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        start(update, context)
        return

    if 'current_df' not in context.user_data:
        update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å.")
        return

    df = context.user_data['current_df']
    group = user_input

    if group not in df.columns:
        update.message.reply_text(f"‚ùå –ì—Ä—É–ø–ø–∞ {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    context.user_data['current_group'] = group

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    keyboard = [
        [KeyboardButton(day) for day in DAYS_OF_WEEK[:3]],
        [KeyboardButton(day) for day in DAYS_OF_WEEK[3:]],
        ["–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    update.message.reply_text(
        f"‚úÖ –ì—Ä—É–ø–ø–∞: <b>{group}</b>\n"
        "üëá –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –∏–ª–∏ –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )


def handle_day_selection(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    user_input = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if user_input == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if 'current_course' in context.user_data:
            handle_course_selection(update, context)
        else:
            start(update, context)
        return

    if 'current_df' not in context.user_data or 'current_group' not in context.user_data:
        update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø—É.")
        return

    df = context.user_data['current_df']
    group = context.user_data['current_group']

    if user_input == "–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        full_schedule = get_full_schedule(df, group)
        response = format_schedule(full_schedule, group)
    elif user_input in DAYS_OF_WEEK:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        day_schedule = get_schedule_for_day(df, group, user_input)
        response = format_schedule(day_schedule, group, user_input)
    else:
        update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    keyboard = [
        [KeyboardButton(day) for day in DAYS_OF_WEEK[:3]],
        [KeyboardButton(day) for day in DAYS_OF_WEEK[3:]],
        ["–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    update.message.reply_text(
        response,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not os.path.exists('data'):
        os.makedirs('data')

    try:
        updater = Updater(TELEGRAM_BOT_TOKEN, use_context=True)
        dispatcher = updater.dispatcher

        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(MessageHandler(Filters.regex(r'^(1 –∫—É—Ä—Å|2 –∫—É—Ä—Å|3-4 –∫—É—Ä—Å)$'), handle_course_selection))
        dispatcher.add_handler(
            MessageHandler(Filters.regex(r'^(–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–í—Ç–æ—Ä–Ω–∏–∫|–°—Ä–µ–¥–∞|–ß–µ—Ç–≤–µ—Ä–≥|–ü—è—Ç–Ω–∏—Ü–∞|–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)$'),
                           handle_day_selection))
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_group_selection))

        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")


if __name__ == '__main__':
    main()